"Can be used as an argument to upload files using https://github.com/jaydenseric/graphql-multipart-request-spec"
scalar Upload
  @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\Upload")

"A date-time string with format 'Y-m-d H:i:s', e.g. '2018-01-01 13:00:00'."
scalar DateTime
  @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")

"Arbitrary data encoded in JavaScript Object Notation. See https://www.json.org."
scalar JSON @scalar(class: "App\\GraphQL\\Scalars\\JSON")

"Indicates what fields are available at the top level of a query operation."
type Query {
  "Get the authenticated user profile."
  me: User! @guard
}

"Indicates what fields are available at the top level of a mutation operation."
type Mutation {
  "Login a user with email and password."
  login(email: String!, password: String!): UserCredential! @validator

  "Logout a user."
  logout: Boolean! @guard

  "Register a user."
  register(
    name: String!
    email: String!
    password: String!
    password_confirmation: String!
  ): UserCredential! @validator

  "Upload a file."
  upload(file: Upload!): File! @guard @validator
}

"Object type representing a user of this application."
type User {
  id: ID!
  name: String!
  email: String!
  email_verified_at: DateTime
  photo: File @morphOne
  created_at: DateTime
  updated_at: DateTime
}

"Object type representing the access token of a user."
type AccessToken {
  name: String!
  value: String!
  type: TokenType!
  abilities: [String!]!
  created_at: DateTime!
  expires_at: DateTime
}

"Object type representing a user of this application and their access token."
type UserCredential {
  user: User!
  access_token: AccessToken!
}

"Object type representing a file in storage."
type File {
  id: ID!
  name: String!
  path: String!
  url: String!
  type: String!
  size: Int!
  meta: JSON!
  created_at: DateTime!
  updated_at: DateTime!
}
